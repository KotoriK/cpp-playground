#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;
class Solution
{

private:

public:

    int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
    {
        auto node_index_max_affected = -1;
        auto max_affect_count = 0;
        std::sort(initial.begin(), initial.end());

        for (size_t i = 0; i < initial.size(); i++)
        {
            bool affected_nodes[graph.size()];

            auto index = initial[i];
            auto node = graph[index];
            auto affect_count = 0;
            for (size_t u = 0; u < node.size(); u++)
            {
                if (node[u] == 1)
                {
                    affect_count++;
                }
            }
            if (max_affect_count < affect_count)
            {
                max_affect_count = affect_count;
                node_index_max_affected = index;
            }
            else if (max_affect_count == affect_count)
            {
                node_index_max_affected = min(index, node_index_max_affected);
            }
        }

        return node_index_max_affected;
    }
};